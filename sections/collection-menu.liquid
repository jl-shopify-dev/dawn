<!-- 
TODO:
- offset menu sections 
- throttle scroll event handling
- set current menu collection section on page load
- remove / handle sticky header option
- image loading optimisations
- pricing
- availabliity: Sold out, display if available

Sections:
- Product Cards
- Product Grid
- Header
- Footer
- Product Page
- Menu?

Features:
- Events
- Deliveries
- Recipes
- Locations
- Story
- Combinations | Recommendations | Bundling

Product Features:
- Ingredients
- Nutritional Info
- Allergies | Disclaimers
- Veggie | Vegan


Tech:
- Turbolinks
- Schema


 -->

<div class="menu-bar">
  <div class="menu-bar-inner menu-page-width">
    {% for block in section.blocks %}
      {%- assign collection = collections[block.settings.collection] -%}
      <a class="menu-bar-link" href="#menu-{{collection.handle}}">{{ collection.title }}</a>
    {% endfor %}
  </div>
</div>
<div class="menu-collection-body">
  <div class="menu-title">
    <h2>{{ section.settings.title }}</h2>
  </div>

  {% for block in section.blocks %}
    {%- assign collection = collections[block.settings.collection] -%}
    <div class="menu-collection" id="menu-{{collection.handle}}">
      <div class="collection-header-title">
      <!-- <div class="collection-header-title sticky"> -->
        <h3 class="menu-page-width">{{collection.title}}</h3>
      </div>
      <p class="collection-header-description menu-page-width">{{collection.description | strip_html}}</p>
      <ul class="product-list list-reset menu-page-width" style="--num-grid-cols: {{ section.settings.number_cols }}">
        {%- for product in collection.products -%}
          {% if product.available or section.settings.show_unavailable_products == true %}
            <li class="product-card {% if product.available != true %} unavailable {% endif %}">
              <a class="product-card-link" href="{{ product.url }}" aria-label="{{ product.title | escape }}"></a>
              <div class="product-card-content">
                <div class="product-card-info">
                  <h4 class="product-card-title">{{ product.title }}</h4>
                  <p class="product-card-description">{{ product.description | strip_html | truncate: 120 }}</p>
                  <p class="product-card-price">$$$</p>                
                  {% if product.metafields.my_food_theme.is_vegan == true %}
                    <span class="veg-badge">Ve</span>
                  {% elsif product.metafields.my_food_theme.is_vegetarian == true %}
                    <span class="vegan-badge">Vg</span>
                  {% endif %}
                </div>
                <div class="product-card-image-wrapper">
                  <img src="{{ product.featured_media | img_url: '220x220' }}"
                      width="{{ product.featured_media.width }}" height="{{ product.featured_media.height }}" loading="lazy"
                      alt="{{ product.featured_media.alt | escape }}">
                  <div class="product-card-quantity visually-hidden">
                      <span aria-hidden="true"></span>
                  </div>
                </div>
              </div>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>
  {% endfor %}

</div>

{% schema %}
{
  "name": "Collection Menu",
  "class": "collection-menu-section",
  "max_blocks": 5,
  "settings": [
    {
      "id": "title",
      "type": "text",
      "label": "title",
      "default": "Menu"
    },
    {
      "type": "range",
      "id": "number_cols",
      "label": "Number of columns",
      "min": 1,
      "max": 3,
      "default": 2
    },
    {
      "type": "checkbox",
      "id": "show_unavailable_products",
      "label": "Show unavailable products",
      "default": true,
      "info": "Show unavailable products"
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name": "t:sections.collection-list.blocks.featured_collection.name",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "t:sections.collection-list.blocks.featured_collection.settings.collection.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Menu",
      "blocks": [
        { 
          "type": "collection"
        },
        {
          "type": "collection"
        }
      ]
    }
  ]
}
{% endschema %}

{% stylesheet %}

.menu-page-width {
  --max-page-width: 1140px;
  width: 100%;
  max-width: var(--max-page-width);
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  margin-left: auto;
  margin-right: auto;
}

.shopify-section.collection-menu-section {
  <!-- width: 1140px; -->
}

.shopify-section.collection-menu-section {
  <!-- outline: solid 3px red !important; -->
}

.menu-title {
  width: 100%;
  text-align: center;
}

.menu-bar {
  --color-background: var(--color-base-accent-1);
  background-color: rgb(var(--color-background));
  color: white;
  position: sticky;
  top: 0;
  width: 100%;
  height: 40px;
  z-index: 100;
  display: flex;
  align-items: center;
}

.menu-bar-link {
  color: inherit;
  text-decoration: none;
  text-transform: uppercase;
  padding-right: 3rem;
  opacity: 0.75;
  white-space: nowrap;
}

.menu-bar-link.current {
  opacity: 1;
  text-shadow: 0 0 1px currentColor;
}

.menu-bar-inner {
  display: flex;
}

@media screen and (max-width: 749px) {
  .menu-bar {
    overflow-x: scroll;
  }
  .menu-bar-inner {
    max-width: none;
  }
}


.menu-collection {
  margin-bottom: 96px;
}

.collection-header-title.sticky {
  position: sticky;
  top: 40px;
  background-color: white;
  height: 40px;
  z-index: 9;
}

.collection-header-title > h3 {
  text-transform: uppercase;
  margin-top: 0;
  margin-bottom: 0;
  display: flex;
  align-items: center;
  height: 100%;
  border-bottom: 0.1rem solid rgba(var(--color-foreground), 0.2);
}

.menu-bar-link:hover {
  text-decoration: underline;
  opacity: 0.9;
}

.collection-header-description {
  font-size: 1.3rem;
  line-height: 1.5;
  opacity: 0.75;
  text-align: justify;
}

.product-list {
  display: grid;
  grid-template-columns: repeat(var(--num-grid-cols, 2), 1fr);
  gap: 2rem;
}

@media screen and (max-width: 749px) {
  .product-list {
    grid-template-columns: 1fr;
  }
}

.product-card {
  background-color: whitesmoke;
  color: black;
}

.product-card.unavailable {
  background-color: lightgrey;
  outline: solid 2px darkred;
}

.list-reset {
  <!-- margin:0; -->
  <!-- padding: 0; -->
  text-indent: 0;
  list-style-type: none;
}

.product-card {
  position: relative;
  color: black;
  padding: 10px;
  overflow: hidden;
}

.product-card:hover .product-card-title {
  text-decoration: underline;
}

.product-card:hover {
  transition: opacity .3s ease-in-out;
  box-shadow: 10px 10px 25px rgba(0, 0, 0, 0.2);
}

.product-card-link {
  position: absolute;
  inset: 0;
}

.product-card-link:empty {
  display: block
}

.product-card-content {
  display: flex;
}

.product-card-info {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.product-card-title {
  font-size: 2.2rem;
  color: black;
  margin-top: 0;
  margin-bottom: 0;
}

.product-card-description {
  color: dimgrey;
  font-size: 1.2rem;
  line-height: 1.5;
  margin: 0;
}

.product-card-price {
  color: black;
  margin-top: 0;
  margin-bottom: 0;
}

.product-card-image-wrapper {
  display: grid;
  <!-- align-items: center; -->
}
.product-card-image-wrapper > img {
  width: 150px;
  height: 150px;
  object-fit: cover;
  object-position: center;
}

.veg-badge {
  color: white;
  background-color: yellowgreen;
  border-radius: 100px;
  width: 3.5ch;
  height: 3.5ch;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
}

.vegan-badge {
  color: white;
  background-color: forestgreen;
  border-radius: 100px;
  width: 3.5ch;
  height: 3.5ch;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
}

{% endstylesheet %}

{% javascript %}
  function isInViewport(el) {
    let
      rect = el.getBoundingClientRect(),
      windowHeight = (window.innerHeight || document.documentElement.clientHeight);
    
    const topEdgeIsVisible = (rect.top > (0)) && (rect.top < windowHeight);
    const bottomEdgeIsVisible = ((rect.top + rect.height) > (windowHeight * 0.25)) && ((rect.top + rect.height) < windowHeight);
    return (topEdgeIsVisible || bottomEdgeIsVisible);

  }

  function setActiveMenuSection() {
    console.log(">> setActiveMenuSection")

    // TODO: Account for multiple menu sections on a single page
    const menuCollections = document.getElementsByClassName("menu-collection");
    let activeElement = null;
    for (let menuCollection of menuCollections) {
      const isVisible = isInViewport(menuCollection)
      if (isVisible) {
        activeElement = menuCollection;
        break
      }
    }
    if (activeElement) {
      const menuBarLinks = document.getElementsByClassName("menu-bar-link")
      
      for (let menuBarLink of menuBarLinks) {
        if (menuBarLink.getAttribute("href") === `#${activeElement.id}`) {
          menuBarLink.classList.add("current")
        }
        else {
          menuBarLink.classList.remove("current")
        }
        
      }

    }
  }
  window.addEventListener("scroll", function() {
    setActiveMenuSection()
  });

{% endjavascript %}